{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","utils/apiRequests.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","setActiveTab","selectedPost","setSelectedPost","className","map","post","id","title","type","cn","onClick","postId","find","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","comments","setComments","useState","name","setName","email","setEmail","setBody","hasEmptyLine","setHasEmptyLine","sendForm","setSendForm","onSubmit","event","preventDefault","trim","newComment","postService","updatedComments","catch","finally","htmlFor","placeholder","value","onChange","target","PostDetails","showList","showForm","setShowForm","handleDeleteComment","commentId","filter","comment","useEffect","length","href","undefined","UserSelector","users","selectedUser","setSelectedUser","hasClick","setHasClick","role","user","handleSelectUser","App","setUsers","setPosts","loader","setLoader","activeCommentTab","setActiveCommentTab","setShowList","hasError","setHasError","userId","classNames","ReactDOM","render","document","getElementById"],"mappings":"+QAWaA,EAA6B,SAAC,GAKpC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,aACAC,EACI,EADJA,gBAiBA,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGC,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGJ,EAAMK,KAAI,SAACC,GAAD,OACT,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKC,KAC3B,oBAAI,UAAQ,YAAZ,SAAyBD,EAAKE,QAC9B,oBAAIJ,UAAU,8BAAd,SACE,wBACEK,KAAK,SACL,UAAQ,aACRL,UAAWM,IACT,kBACA,CAAE,YAAwB,OAAZR,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOD,EAAKC,KAE1CI,QAAS,kBApCMC,EAoCsBN,EAAKC,SAnCxC,OAAZL,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOK,GACvBX,GAAa,GACbE,EAAgB,QAEhBF,GAAa,GACbE,EAAgBH,EAAMa,MAAK,SAAAP,GAAI,OAAIA,EAAKC,KAAOK,MAAW,QANhC,IAACA,GA6BjB,UASe,OAAZV,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOD,EAAKC,GAAK,QAAU,aAbxBD,EAAKC,gBC7C5BO,G,MAAS,kBACpB,qBAAKV,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wB,OCJbW,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADI,KAEVC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIZ,GAAJ,OAAoBD,EAAWC,IADzBY,EAEL,SAAIZ,EAAaE,GAAjB,OAAmCH,EAAWC,EAAK,OAAQE,IAFtDU,EAIH,SAACZ,GAAD,OAAiBD,EAAQC,EAAK,WCzBjC,IAAMa,EAAkC,SAAC,GAIzC,IAHLC,EAGI,EAHJA,SACAlC,EAEI,EAFJA,aACAmC,EACI,EADJA,YAEA,EAAwBC,mBAAiB,IAAzC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAiB,IAA3C,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAwBJ,mBAAiB,IAAzC,mBAAOZ,EAAP,KAAaiB,EAAb,KACA,EAAwCL,oBAAS,GAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAAgCP,oBAAS,GAAzC,mBAAOQ,EAAP,KAAiBC,EAAjB,KAyDA,OACE,uBACE,UAAQ,iBACRC,SA9CqB,SAACC,GAGxB,GAFAA,EAAMC,iBAEFhD,EACF,GAAKqC,EAAKY,QAAWV,EAAMU,QAAWzB,EAAKyB,OAEpC,CACLN,GAAgB,GAEhB,IAAMO,EAAa,CACjBxC,OAAQV,EAAaK,GACrBgC,OACAE,QACAf,QAGFqB,GAAY,GClCb,YAEkB,IADvBnC,EACsB,EADtBA,OAAQ2B,EACc,EADdA,KAAME,EACQ,EADRA,MAAOf,EACC,EADDA,KAErB,OAAOQ,EAAqB,YAAa,CACvCtB,SAAQ2B,OAAME,QAAOf,SD+BjB2B,CAAyBD,GACtBtB,MAAK,WACJ,IAAMwB,EAA0B,sBAAOlB,GAAP,CAAiBgB,IAEjDf,EAAYiB,GAEZd,EAAQ,IACRE,EAAS,IACTC,EAAQ,OAETY,OAAM,WACLR,GAAY,MAEbS,SAAQ,WACPT,GAAY,WA1BhBF,GAAgB,IAuCpB,UAIE,sBAAKzC,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQqD,QAAQ,sBAAjC,yBAIA,sBAAKrD,UAAU,yCAAf,UACE,uBACEK,KAAK,OACL8B,KAAK,OACLhC,GAAG,sBACHmD,YAAY,eACZtD,UAAWM,IAAG,QAAS,CAAE,YAAaoC,IAAaP,EAAKY,SACxDQ,MAAOpB,EACPqB,SAzES,SAACX,GAClBT,EAAQS,EAAMY,OAAOF,UA2Ef,sBAAMvD,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGf,sBACEA,UAAWM,IACT,yBAA0B,CAAE,kBAAmBkC,IAEjD,UAAQ,YAJV,SAME,mBAAGxC,UAAU,qCAIhBwC,GACC,mBAAGxC,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQqD,QAAQ,uBAAjC,0BAIA,sBAAKrD,UAAU,yCAAf,UACE,uBACEK,KAAK,OACL8B,KAAK,QACLhC,GAAG,uBACHmD,YAAY,iBACZtD,UAAWM,IAAG,QAAS,CAAE,YAAaoC,IAAaL,EAAMU,SACzDQ,MAAOlB,EACPmB,SA1GU,SAACX,GACnBP,EAASO,EAAMY,OAAOF,UA4GhB,sBAAMvD,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGf,sBACEA,UAAWM,IACT,yBAA0B,CAAE,kBAAmBkC,IAEjD,UAAQ,YAJV,SAME,mBAAGxC,UAAU,qCAIhBwC,GACC,mBAAGxC,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQqD,QAAQ,eAAjC,0BAIA,qBAAKrD,UAAU,UAAf,SACE,0BACEG,GAAG,eACHgC,KAAK,OACLmB,YAAY,oBACZtD,UAAWM,IACT,WAAY,CAAE,YAAaoC,IAAapB,EAAKyB,SAE/CQ,MAAOjC,EACPkC,SA5IY,SAACX,GACrBN,EAAQM,EAAMY,OAAOF,YA+IhBf,GACC,mBAAGxC,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAWM,IAAG,iBAAkB,CAAE,aAAcoC,IAFlD,mBAQF,qBAAK1C,UAAU,UAAf,SAEE,wBACEK,KAAK,QACLL,UAAU,0BACVO,QA7He,WACvB6B,EAAQ,IACRE,EAAS,IACTC,EAAQ,KAuHF,4BEpLGmB,EAA+B,SAAC,GAKtC,IAJL1B,EAII,EAJJA,SACAlC,EAGI,EAHJA,aACAmC,EAEI,EAFJA,YACA0B,EACI,EADJA,SAEA,EAAgCzB,oBAAS,GAAzC,mBAAO0B,EAAP,KAAiBC,EAAjB,KAEMC,EAAsB,SAACC,GDGxB,IAAwBvD,KCDTuD,EDEbjC,EAAA,oBAA2BtB,KCD7BkB,MAAK,WACJ,IAAMwB,EACJlB,EAASgC,QAAO,SAACC,GAAD,OAAaA,EAAQ9D,KAAO4D,KAE9C9B,EAAYiB,OAQlB,OAJAgB,qBAAU,WACRL,GAAY,KACX,CAAC/D,IAGF,sBAAKE,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,2BAA6BF,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAcK,GAA3C,oBAAkDL,QAAlD,IAAkDA,OAAlD,EAAkDA,EAAcM,SAChE,mBAAG,UAAQ,WAAX,gBAAuBN,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAcwB,UAGvC,sBAAKtB,UAAU,QAAf,UACG2D,GAAY,cAAC,EAAD,MACV3B,EAASmC,SAAWR,GACpB,mBAAG3D,UAAU,aAAb,wBAED2D,GAAc3B,EAASmC,OAASnC,EAAS/B,KAAI,SAACgE,GAAD,OAC7C,0BAEEjE,UAAU,mBACV,UAAQ,UAHV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAGoE,KAAI,iBAAYH,EAAQ5B,OAAS,UAAQ,gBAA5C,SACG4B,EAAQ9B,OAEX,wBACE,UAAQ,gBACR9B,KAAK,SACLL,UAAU,kBACV,aAAW,SACXO,QAAS,gBACY8D,IAAfJ,EAAQ9D,IACV2D,EAAoBG,EAAQ9D,KAPlC,uBAeF,qBAAKH,UAAU,eAAe,UAAQ,cAAtC,SACGiE,EAAQ3C,SAxBN2C,EAAQ9D,QA6BZwD,GACC,mBAAG3D,UAAU,aAAa,UAAQ,oBAAlC,8BAMJ2D,IAAaC,GACb,wBACE,UAAQ,qBACRvD,KAAK,SACLL,UAAU,iBACVO,QAAS,kBAAMsD,GAAaD,IAJ9B,gCAWHA,GACC,cAAC,EAAD,CACE5B,SAAUA,EACVlC,aAAcA,EACdmC,YAAaA,QC5FVqC,EAAgC,SAAC,GAIvC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aACAC,EACI,EADJA,gBAEA,EAAgCvC,oBAAS,GAAzC,mBAAOwC,EAAP,KAAiBC,EAAjB,KAWA,OACE,sBACE,UAAQ,eACR3E,UAAU,qBAFZ,UAIE,qBAAKA,UAAU,mBAAf,SACE,yBACEK,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdO,QApBgB,WACtBoE,GAAaD,IAcT,UAOE,+BAAOF,EAAeA,EAAarC,KAAO,kBAC1C,sBAAMnC,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBAAKA,UAAU,gBAAgBG,GAAG,gBAAgByE,KAAK,OAAvD,SACE,qBACE5E,UAAU,mBADZ,SAGG0E,GAAYH,EAAMtE,KAAI,SAAA4E,GAAI,OACzB,mBAEET,KAAI,gBAAWS,EAAK1E,IACpBH,UAAWM,IACT,gBAAiB,CAAE,YAAauE,EAAK1E,MAAL,OAAYqE,QAAZ,IAAYA,OAAZ,EAAYA,EAAcrE,MAE5DI,QAAS,kBApCI,SAACsE,GACxBJ,EAAgBI,GAChBF,GAAaD,GAkCYI,CAAiBD,IANlC,SAQGA,EAAK1C,MAPD0C,EAAK1E,eCtCX4E,EAAgB,WAC3B,MAA0B7C,mBAAiB,IAA3C,mBAAOqC,EAAP,KAAcS,EAAd,KACA,EAA0B9C,mBAAiB,IAA3C,mBAAOtC,EAAP,KAAcqF,EAAd,KACA,EAA4B/C,oBAAkB,GAA9C,mBAAOgD,EAAP,KAAeC,EAAf,KACA,EAAwCjD,mBAAsB,MAA9D,mBAAOsC,EAAP,KAAqBC,EAArB,KACA,EAAgDvC,oBAAkB,GAAlE,mBAAOkD,EAAP,KAAyBC,EAAzB,KACA,EAAgCnD,mBAAgC,IAAhE,mBAAOF,EAAP,KAAiBC,EAAjB,KACA,EAAwCC,mBAAsB,MAA9D,mBAAOpC,EAAP,KAAqBC,EAArB,KACA,EAAgCmC,oBAAS,GAAzC,mBAAOyB,EAAP,KAAiB2B,EAAjB,KACA,EAAgCpD,oBAAS,GAAzC,mBAAOqD,EAAP,KAAiBC,EAAjB,KA8BA,OA5BAtB,qBAAU,WHhBHpC,EAAmB,UGkBrBJ,MAAK,SAACE,GAAD,OAAcoD,EAASpD,MAC5BuB,OAAM,kBAAMqC,GAAY,QAC1B,IAEHtB,qBAAU,WH3BL,IAAkBuB,EG4BjBjB,IACFW,GAAU,IH7BSM,EG8BEjB,EAAarE,GH7B/B2B,EAAA,wBAAoC2D,KG8BpC/D,MAAK,SAAAN,GACJ6D,EAAS7D,MAEVgC,SAAQ,WACP+B,GAAU,SAGf,CAACX,IAEJN,qBAAU,WHhCL,IAAqB1D,EGiCpBV,IACFwF,GAAY,IHlCU9E,EGmCEV,EAAaK,GHlClC2B,EAAA,2BAA0CtB,KGkCJkB,MAAK,SAACN,GAC7Ca,EAAYb,MACXgC,SAAQ,kBAAMkC,GAAY,SAE9B,CAACxF,IAGF,sBAAME,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEuE,MAAOA,EACPC,aAAcA,EACdC,gBAAiBA,MAIrB,sBAAKzE,UAAU,QAAQ,UAAQ,cAA/B,UAEGkF,GAAU,cAAC,EAAD,IAEVK,GACC,qBACEvF,UAAU,yBACV,UAAQ,oBAFV,mCAQF,sBAAKA,UAAU,QAAQ,UAAQ,cAA/B,WACIkF,GAAUV,GAAgB5E,EAAMuE,OAAS,GACzC,cAAC,EAAD,CACEvE,MAAOA,EACPC,aAAcwF,EACdvF,aAAcA,EACdC,gBAAiBA,KAGnBmF,GAA2B,IAAjBtF,EAAMuE,QAAgBK,GAChC,qBACExE,UAAU,0BACV,UAAQ,aAFV,2BAOAkF,IAAWV,GACX,mBAAG,UAAQ,iBAAX,yCASV,qBACE,UAAQ,UACRxE,UAAW0F,IACT,OACA,YACA,eACA,UACA,iBAPJ,SAUGN,GACC,qBAAKpF,UAAU,gCAAf,SACE,cAAC,EAAD,CACEgC,SAAUA,EACVlC,aAAcA,EACdmC,YAAaA,EACb0B,SAAUA,gBCxH5BgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8a44eba0.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  setActiveTab: (activeTab: boolean) => void;\n  selectedPost: Post | null;\n  setSelectedPost: (selectedPost: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setActiveTab,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  // const handleActivateComment = (postId: number) => {\n  //   setActiveTab(true);\n  //   setSelectedPost(posts.find(post => post.id === postId) || null);\n  // }\n\n  const handleActivateComment = (postId: number) => {\n    if (selectedPost?.id === postId) {\n      setActiveTab(false);\n      setSelectedPost(null);\n    } else {\n      setActiveTab(true);\n      setSelectedPost(posts.find(post => post.id === postId) || null);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n              <td data-cy=\"PostTitle\">{post.title}</td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn(\n                    'button is-link ',\n                    { 'is-light': selectedPost?.id !== post.id },\n                  )}\n                  onClick={() => handleActivateComment(post.id)}\n                >\n                  {selectedPost?.id === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport * as postService from '../utils/apiRequests';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comments: Comment[];\n  selectedPost: Post | null;\n  setComments: (newComment: Comment[]) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  comments,\n  selectedPost,\n  setComments,\n}) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [body, setBody] = useState<string>('');\n  const [hasEmptyLine, setHasEmptyLine] = useState(false);\n  const [sendForm, setSendForm] = useState(false);\n\n  const handleName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  const handleEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n  };\n\n  const handleComment = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n  };\n\n  const handleAddComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (selectedPost) {\n      if (!name.trim() || !email.trim() || !body.trim()) {\n        setHasEmptyLine(true);\n      } else {\n        setHasEmptyLine(false);\n\n        const newComment = {\n          postId: selectedPost.id,\n          name,\n          email,\n          body,\n        };\n\n        setSendForm(true);\n        postService.postComments(newComment)\n          .then(() => {\n            const updatedComments: Comment[] = [...comments, newComment];\n\n            setComments(updatedComments);\n\n            setName('');\n            setEmail('');\n            setBody('');\n          })\n          .catch(() => {\n            setSendForm(true);\n          })\n          .finally(() => {\n            setSendForm(false);\n          });\n      }\n    }\n  };\n\n  const handleClearLines = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleAddComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': sendForm || !name.trim() })}\n            value={name}\n            onChange={handleName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          <span\n            className={cn(\n              'icon is-small is-right', { 'has-text-danger': hasEmptyLine },\n            )}\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        {hasEmptyLine && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': sendForm || !email.trim() })}\n            value={email}\n            onChange={handleEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          <span\n            className={cn(\n              'icon is-small is-right', { 'has-text-danger': hasEmptyLine },\n            )}\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        {hasEmptyLine && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn(\n              'textarea', { 'is-danger': sendForm || !body.trim() },\n            )}\n            value={body}\n            onChange={handleComment}\n          />\n        </div>\n\n        {hasEmptyLine && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', { 'is-loading': sendForm })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearLines}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport function getPosts(userId: number) {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n\nexport function getUsers() {\n  return client.get<User[]>('/users');\n}\n\nexport function getComments(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport function postComments({\n  postId, name, email, body,\n}: Omit<Comment, 'id'>) {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n}\n\nexport function deleteComments(postId: number) {\n  return client.delete(`/comments/${postId}`);\n}\n","import React, { useState, useEffect } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport * as postService from '../utils/apiRequests';\n\ntype Props = {\n  comments: Comment[];\n  selectedPost: Post | null;\n  setComments: (newComments: Comment[]) => void;\n  showList: boolean;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  selectedPost,\n  setComments,\n  showList,\n}) => {\n  const [showForm, setShowForm] = useState(false);\n\n  const handleDeleteComment = (commentId: number) => {\n    postService\n      .deleteComments(commentId)\n      .then(() => {\n        const updatedComments\n        = comments.filter((comment) => comment.id !== commentId);\n\n        setComments(updatedComments);\n      });\n  };\n\n  useEffect(() => {\n    setShowForm(false);\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">{`#${selectedPost?.id}: ${selectedPost?.title}`}</h2>\n        <p data-cy=\"PostBody\">{selectedPost?.body}</p>\n      </div>\n\n      <div className=\"block\">\n        {showList && <Loader />}\n        {!!comments.length && !showList\n        && <p className=\"title is-4\">Comments:</p>}\n\n        {!showList && !!comments.length ? comments.map((comment) => (\n          <article\n            key={comment.id}\n            className=\"message is-small\"\n            data-cy=\"Comment\"\n          >\n            <div className=\"message-header\">\n              <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                {comment.name}\n              </a>\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n                onClick={() => {\n                  if (comment.id !== undefined) {\n                    handleDeleteComment(comment.id);\n                  }\n                }}\n              >\n                Delete\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {comment.body}\n            </div>\n          </article>\n        ))\n          : (\n            !showList && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )\n          )}\n\n        {!showList && !showForm && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setShowForm(!showForm)}\n          >\n            Write a comment\n          </button>\n        )}\n      </div>\n\n      {showForm && (\n        <NewCommentForm\n          comments={comments}\n          selectedPost={selectedPost}\n          setComments={setComments}\n        />\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n// import { Post } from '../types/Post';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [hasClick, setHasClick] = useState(false);\n\n  const handleClickOpen = () => {\n    setHasClick(!hasClick);\n  };\n\n  const handleSelectUser = (user: User) => {\n    setSelectedUser(user);\n    setHasClick(!hasClick);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleClickOpen}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div\n          className=\"dropdown-content\"\n        >\n          {hasClick && users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn(\n                'dropdown-item', { 'is-active': user.id === selectedUser?.id },\n              )}\n              onClick={() => handleSelectUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport * as postService from './utils/apiRequests';\nimport { User } from './types/User';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loader, setLoader] = useState<boolean>(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [activeCommentTab, setActiveCommentTab] = useState<boolean>(false);\n  const [comments, setComments] = useState<Omit<Comment, 'id'>[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [showList, setShowList] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    postService.getUsers()\n      .then((response) => setUsers(response))\n      .catch(() => setHasError(true));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setLoader(true);\n      postService.getPosts(selectedUser.id)\n        .then(data => {\n          setPosts(data);\n        })\n        .finally(() => {\n          setLoader(false);\n        });\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    if (selectedPost) {\n      setShowList(true);\n      postService.getComments(selectedPost.id).then((data) => {\n        setComments(data);\n      }).finally(() => setShowList(false));\n    }\n  }, [selectedPost]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n\n                {loader && <Loader />}\n\n                {hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                <div className=\"block\" data-cy=\"MainContent\">\n                  {!loader && selectedUser && posts.length > 0 && (\n                    <PostsList\n                      posts={posts}\n                      setActiveTab={setActiveCommentTab}\n                      selectedPost={selectedPost}\n                      setSelectedPost={setSelectedPost}\n                    />\n                  )}\n                  {!loader && posts.length === 0 && selectedUser && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n                  {!loader && !selectedUser && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              'Sidebar--open',\n            )}\n          >\n            {activeCommentTab && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  comments={comments}\n                  selectedPost={selectedPost}\n                  setComments={setComments}\n                  showList={showList}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}